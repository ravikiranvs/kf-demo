# PIPELINE DEFINITION
# Name: download-preprocess-train-deploy-pipeline
# Inputs:
#    url: str
components:
  comp-deploy-model-with-kserve:
    executorLabel: exec-deploy-model-with-kserve
    inputDefinitions:
      parameters:
        isvc_name:
          parameterType: STRING
        model_uri:
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-download-dataset:
    executorLabel: exec-download-dataset
    inputDefinitions:
      parameters:
        url:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        dataset_path:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-preprocess-dataset:
    executorLabel: exec-preprocess-dataset
    inputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        output_file:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-train-model:
    executorLabel: exec-train-model
    inputDefinitions:
      artifacts:
        dataset:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
      parameters:
        model_name:
          parameterType: STRING
        run_name:
          parameterType: STRING
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-deploy-model-with-kserve:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - deploy_model_with_kserve
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'kserve==0.13.1'\
          \ 'kubernetes==26.1.0' 'tenacity==9.0.0' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef deploy_model_with_kserve(model_uri: str, isvc_name: str) -> str:\n\
          \    import os\n    from kubernetes.client import V1ObjectMeta, V1EnvVar,\
          \ V1EnvVarSource, V1SecretKeySelector\n    from kserve import (\n      \
          \  constants,\n        KServeClient,\n        V1beta1InferenceService,\n\
          \        V1beta1InferenceServiceSpec,\n        V1beta1PredictorSpec,\n \
          \       V1beta1SKLearnSpec,\n    )\n    from tenacity import retry, wait_exponential,\
          \ stop_after_attempt\n\n    print(\"Deploying with mlflow_endpoint:\", os.getenv('AWS_S3_ENDPOINT'))\n\
          \n    isvc = V1beta1InferenceService(\n        api_version=constants.KSERVE_V1BETA1,\n\
          \        kind=constants.KSERVE_KIND,\n        metadata=V1ObjectMeta(\n \
          \           name=isvc_name,\n            annotations={\"sidecar.istio.io/inject\"\
          : \"false\"},\n        ),\n        spec=V1beta1InferenceServiceSpec(\n \
          \           predictor=V1beta1PredictorSpec(\n                service_account_name=\"\
          kserve-controller-s3\",\n                sklearn=V1beta1SKLearnSpec(\n \
          \                   storage_uri=model_uri,\n                    env=[\n\
          \                        V1EnvVar(\n                            name=\"\
          AWS_S3_ENDPOINT\",\n                            value=os.getenv('AWS_S3_ENDPOINT'),\n\
          \                        )\n                    ]\n                )\n \
          \           )\n        )\n    )\n\n    client = KServeClient()\n    client.create(isvc)\n\
          \n    @retry(\n        wait=wait_exponential(multiplier=2, min=1, max=10),\n\
          \        stop=stop_after_attempt(30),\n        reraise=True,\n    )\n  \
          \  def assert_isvc_created(client, isvc_name):\n        assert client.is_isvc_ready(isvc_name),\
          \ f\"Failed to create Inference Service {isvc_name}.\"\n\n    assert_isvc_created(client,\
          \ isvc_name)\n    isvc_resp = client.get(isvc_name)\n    isvc_url = isvc_resp['status']['address']['url']\n\
          \    print(\"Inference URL:\", isvc_url)\n\n    return isvc_url\n\n"
        env:
        - name: AWS_S3_ENDPOINT
          value: http://mlflow-minio.kubeflow:9000
        image: python:3.11
    exec-download-dataset:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - download_dataset
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'requests==2.32.3'\
          \ 'pandas==2.2.2' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef download_dataset(url: str, dataset_path: OutputPath('Dataset'))\
          \ -> None:\n    import requests\n    import pandas as pd\n\n    response\
          \ = requests.get(url)\n    response.raise_for_status()\n\n    from io import\
          \ StringIO\n    dataset = pd.read_csv(StringIO(response.text), header=0,\
          \ sep=\";\")\n\n    dataset.to_csv(dataset_path, index=False)\n\n"
        image: python:3.11
    exec-preprocess-dataset:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - preprocess_dataset
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'pyarrow==15.0.2' && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef preprocess_dataset(dataset: InputPath('Dataset'), output_file:\
          \ OutputPath('Dataset')) -> None:\n    import pandas as pd\n\n    df = pd.read_csv(dataset,\
          \ header=0)\n    df.columns = [c.lower().replace(\" \", \"_\") for c in\
          \ df.columns]\n    df.to_parquet(output_file)\n\n"
        image: python:3.11
    exec-train-model:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_model
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.11.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas==2.2.2'\
          \ 'scikit-learn==1.5.1' 'mlflow==2.15.1' 'pyarrow==15.0.2' 'boto3==1.34.162'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_model(dataset: InputPath('Dataset'), run_name: str, model_name:\
          \ str) -> str:\n    import os\n    import mlflow\n    import pandas as pd\n\
          \    from sklearn.linear_model import ElasticNet\n    from sklearn.model_selection\
          \ import train_test_split\n\n    df = pd.read_parquet(dataset)\n\n    target_column\
          \ = \"quality\"\n\n    train_x, test_x, train_y, test_y = train_test_split(\n\
          \        df.drop(columns=[target_column]),\n        df[target_column], test_size=0.25,\n\
          \        random_state=42, stratify=df[target_column]\n    )\n\n    mlflow.sklearn.autolog()\n\
          \n    with mlflow.start_run(run_name=run_name) as run:\n        mlflow.set_tag(\"\
          author\", \"kf-testing\")\n        lr = ElasticNet(alpha=0.5, l1_ratio=0.5,\
          \ random_state=42)\n        lr.fit(train_x, train_y)\n        mlflow.sklearn.log_model(lr,\
          \ \"model\", registered_model_name=model_name)\n\n        model_uri = f\"\
          {run.info.artifact_uri}/model\"\n        print(model_uri)\n        return\
          \ model_uri\n\n"
        env:
        - name: MLFLOW_TRACKING_URI
          value: http://mlflow-server.kubeflow.svc.cluster.local:5000
        - name: MLFLOW_S3_ENDPOINT_URL
          value: http://mlflow-minio.kubeflow:9000
        - name: AWS_ACCESS_KEY_ID
          value: minio
        - name: AWS_SECRET_ACCESS_KEY
          value: GLHTXTABH3VK4KG1B7WBPUMXU875WM
        image: python:3.11
pipelineInfo:
  name: download-preprocess-train-deploy-pipeline
root:
  dag:
    tasks:
      deploy-model-with-kserve:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-deploy-model-with-kserve
        dependentTasks:
        - train-model
        inputs:
          parameters:
            isvc_name:
              runtimeValue:
                constant: wine-regressor4
            model_uri:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: train-model
        taskInfo:
          name: deploy-model-with-kserve
      download-dataset:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-download-dataset
        inputs:
          parameters:
            url:
              componentInputParameter: url
        taskInfo:
          name: download-dataset
      preprocess-dataset:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-preprocess-dataset
        dependentTasks:
        - download-dataset
        inputs:
          artifacts:
            dataset:
              taskOutputArtifact:
                outputArtifactKey: dataset_path
                producerTask: download-dataset
        taskInfo:
          name: preprocess-dataset
      train-model:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-model
        dependentTasks:
        - preprocess-dataset
        inputs:
          artifacts:
            dataset:
              taskOutputArtifact:
                outputArtifactKey: output_file
                producerTask: preprocess-dataset
          parameters:
            model_name:
              runtimeValue:
                constant: wine-elasticnet
            run_name:
              runtimeValue:
                constant: elastic_net_models
        taskInfo:
          name: train-model
  inputDefinitions:
    parameters:
      url:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.11.0
